// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: booking_enum.proto

package com.demo.grpc.proto;

/**
 * Protobuf enum {@code com.demo.grpc.proto.BookingType}
 */
public enum BookingType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN_TYPE = 0;</code>
   */
  UNKNOWN_TYPE(0),
  /**
   * <code>UPDATE = 1;</code>
   */
  UPDATE(1),
  /**
   * <code>VIEW_BY_ID = 2;</code>
   */
  VIEW_BY_ID(2),
  /**
   * <code>CANCEL = 3;</code>
   */
  CANCEL(3),
  /**
   * <code>ADD = 4;</code>
   */
  ADD(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN_TYPE = 0;</code>
   */
  public static final int UNKNOWN_TYPE_VALUE = 0;
  /**
   * <code>UPDATE = 1;</code>
   */
  public static final int UPDATE_VALUE = 1;
  /**
   * <code>VIEW_BY_ID = 2;</code>
   */
  public static final int VIEW_BY_ID_VALUE = 2;
  /**
   * <code>CANCEL = 3;</code>
   */
  public static final int CANCEL_VALUE = 3;
  /**
   * <code>ADD = 4;</code>
   */
  public static final int ADD_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static BookingType valueOf(int value) {
    return forNumber(value);
  }

  public static BookingType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN_TYPE;
      case 1: return UPDATE;
      case 2: return VIEW_BY_ID;
      case 3: return CANCEL;
      case 4: return ADD;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<BookingType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      BookingType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<BookingType>() {
          public BookingType findValueByNumber(int number) {
            return BookingType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.demo.grpc.proto.BookingEnum.getDescriptor().getEnumTypes().get(0);
  }

  private static final BookingType[] VALUES = values();

  public static BookingType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private BookingType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.demo.grpc.proto.BookingType)
}

